pypacker directory structure
============================

pypacker
	examples		# usage examples for pypacker
	pypacker		# pypacker core logic, routines for handling packet-data, protocols sorted by layers
		layer12		# protocols for ISO/OSI-layer 1 and 2 separated into modules. The name of the module
				# is the same as the main class in this module.
		layer3		# ...for layer 3
		layer4		# ...for layer 4
		layer567	# ...for layer 5, 6 and 7
	tests			# tests for pypacker logic and protocols


Styleguide
==========

- Checksums should only be recalculated on changes to relevant headers or data
- All official Python style-guidelines should be applied except the
  preference of space-characters. Tabs must be used throughout
  the code:

	GLOBAL_XYZ[tab]= 123[tab]# some comment

	class someclass()
	# some comment
		[tab]def xyz(self):
		[tab]# Some comment
			[tab][tab]var1 = 123[tab]# some comment
			[tab][tab]pass

  PEP8 configuration:
	[pep8]
	ignore = W191,E126,E127,E128,E223
	max-line-length = 160

- Strings are written using double quotes like "string_xyz"
- Readability is more important than performance
- avoid overwriting "__getattribute__"


Adding protocols
================

- New protocols are added by subclassing "Packet" and placing them into the
  right "layerX"-directory. The protocol header is basically defined by the
  static field "__hdr__". See code documentation for classes "MetaPacket" and
  "Packet" in pypacker/pypacker.py for further information. 
- Every protocol needs a testcase in tests/test_pypacker.py
