pypacker directory structure
============================

pypacker
	examples		# usage examples for pypacker
	pypacker		# protocols sorted by layers, pypacker core logic, routines for handling packet-data
		layer12		# protocols for ISO/OSI-layer 1 and 2
		layer3		# ...for layer 3
		layer4		# ...for layer 4
		layer567	# ...for layer 5, 6 and 7
	tests		# tests for pypacker logic and protocols

Styleguide
==========

- Checksums should only be recalculated on changes to relevant headers or data
- All official Python style-guidelines should be applied except the
  preference of space-characters. Tabs must be used throughout
  the code:

	GLOBAL_XYZ[tab]= 123[tab]# some comment

	class someclass()
	# some comment
		[tab]def xyz(self):
		[tab]# Some comment
			[tab][tab]var1 = 123[tab]# some comment
			[tab][tab]pass

- Strings are written using double quotes like "string_xyz".
- Readability is more important than performance
- Python upgrade to version 3.x:
	minor changes are ignored for backward-compatibility (2.x -> 3.x):
	for k,v in xyz.items()	->	for k,v in list(xyz.items())
- avoid overwriting "__getattribute__"

Adding protocols
================

- New rptocols are added by subclassing "Packet" and placing them into the
right "layerX"-directory. Static protocol-header are defined using the static
field "__hdr__". See code documentation for classes "MetaPacket" and
"Packet" in pypacker/pypacker.py for detailed information. 
- Every protocol needs a testcase in tests/test_pypacker.py
