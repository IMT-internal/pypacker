import unittest
import sys
# pypacker-specific imports
import dpkt
from dpkt.asn1 import decode
from dpkt.dpkt import UnpackError
#from dpkt import bgp
#from dpkt.bgp import BGP
from dpkt.dhcp import DHCP
from dpkt.diameter import Diameter
from dpkt import ethernet
from dpkt.ethernet import Ethernet
from dpkt import h225
from dpkt.h225 import H225
from dpkt.http import Request, Response
from dpkt.icmp import ICMP
from dpkt import ieee80211
from dpkt.ieee80211 import IEEE80211
from dpkt.dns import DNS, pack_name
from dpkt.udp import UDP
from dpkt.ip import IP
from dpkt.ip6 import IP6, IP6AHHeader, IP6HopOptsHeader, IP6FragmentHeader, IP6OptsHeader, IP6DstOptsHeader
from dpkt.rip import RIP
from dpkt import sctp
from dpkt.sctp import SCTP
from dpkt import ntp
from dpkt.ntp import NTP
from dpkt.pcap import FileHdr, LEFileHdr
from dpkt.radiotap import Radiotap
from dpkt.netflow import Netflow1
from dpkt.llc import LLC
from dpkt import telnet
#from dpkt.telnet import strip_options

class ASN1TestCase(unittest.TestCase):
	def test_asn1(self):
		s = b'0\x82\x02Q\x02\x01\x0bc\x82\x02J\x04xcn=Douglas J Song 1, ou=Information Technology Division, ou=Faculty and Staff, ou=People, o=University of Michigan, c=US\n\x01\x00\n\x01\x03\x02\x01\x00\x02\x01\x00\x01\x01\x00\x87\x0bobjectclass0\x82\x01\xb0\x04\rmemberOfGroup\x04\x03acl\x04\x02cn\x04\x05title\x04\rpostalAddress\x04\x0ftelephoneNumber\x04\x04mail\x04\x06member\x04\thomePhone\x04\x11homePostalAddress\x04\x0bobjectClass\x04\x0bdescription\x04\x18facsimileTelephoneNumber\x04\x05pager\x04\x03uid\x04\x0cuserPassword\x04\x08joinable\x04\x10associatedDomain\x04\x05owner\x04\x0erfc822ErrorsTo\x04\x08ErrorsTo\x04\x10rfc822RequestsTo\x04\nRequestsTo\x04\tmoderator\x04\nlabeledURL\x04\nonVacation\x04\x0fvacationMessage\x04\x05drink\x04\x0elastModifiedBy\x04\x10lastModifiedTime\x04\rmodifiersname\x04\x0fmodifytimestamp\x04\x0ccreatorsname\x04\x0fcreatetimestamp'
		self.failUnless(decode(s) == [(48, [(2, 11), (99, [(4, 'cn=Douglas J Song 1, ou=Information Technology Division, ou=Faculty and Staff, ou=People, o=University of Michigan, c=US'), (10, '\x00'), (10, '\x03'), (2, 0), (2, 0), (1, '\x00'), (135, 'objectclass'), (48, [(4, 'memberOfGroup'), (4, 'acl'), (4, 'cn'), (4, 'title'), (4, 'postalAddress'), (4, 'telephoneNumber'), (4, 'mail'), (4, 'member'), (4, 'homePhone'), (4, 'homePostalAddress'), (4, 'objectClass'), (4, 'description'), (4, 'facsimileTelephoneNumber'), (4, 'pager'), (4, 'uid'), (4, 'userPassword'), (4, 'joinable'), (4, 'associatedDomain'), (4, 'owner'), (4, 'rfc822ErrorsTo'), (4, 'ErrorsTo'), (4, 'rfc822RequestsTo'), (4, 'RequestsTo'), (4, 'moderator'), (4, 'labeledURL'), (4, 'onVacation'), (4, 'vacationMessage'), (4, 'drink'), (4, 'lastModifiedBy'), (4, 'lastModifiedTime'), (4, 'modifiersname'), (4, 'modifytimestamp'), (4, 'creatorsname'), (4, 'createtimestamp')])])])])

class BGPTestCase(unittest.TestCase):
	def testPack(self):
		b1 = BGP(self.bgp1)
		self.failUnless(self.bgp1 == str(b1))
		b2 = BGP(self.bgp2)
		self.failUnless(self.bgp2 == str(b2))
		b3 = BGP(self.bgp3)
		self.failUnless(self.bgp3 == str(b3))
		b4 = BGP(self.bgp4)
		self.failUnless(self.bgp4 == str(b4))

	def testUnpack(self):
		b1 = BGP(self.bgp1)
		self.failUnless(b1.len == 19)
		self.failUnless(b1.type == bgp.KEEPALIVE)
		self.failUnless(b1.keepalive is not None)

		b2 = BGP(self.bgp2)
		self.failUnless(b2.type == bgp.UPDATE)
		self.failUnless(len(b2.update.withdrawn) == 0)
		self.failUnless(len(b2.update.announced) == 1)
		self.failUnless(len(b2.update.attributes) == 9)
		a = b2.update.attributes[1]
		self.failUnless(a.type ==  bgp.AS_PATH)
		self.failUnless(a.len == 10)
		self.failUnless(len(a.as_path.segments) == 2)
		s = a.as_path.segments[0]
		self.failUnless(s.type ==  bgp.AS_SET)
		self.failUnless(s.len == 2)
		self.failUnless(len(s.path) == 2)
		self.failUnless(s.path[0] == 500)

		a = b2.update.attributes[6]
		self.failUnless(a.type == bgp.COMMUNITIES)
		self.failUnless(a.len == 12)
		self.failUnless(len(a.communities.list) == 3)
		c = a.communities.list[0]
		self.failUnless(c.asn == 65215)
		self.failUnless(c.value == 1)
		r = b2.update.announced[0]
		self.failUnless(r.len == 22)
		self.failUnless(r.prefix == b'\xc0\xa8\x04\x00')

		b3 = BGP(self.bgp3)
		self.failUnless(b3.type == bgp.UPDATE)
		self.failUnless(len(b3.update.withdrawn) == 0)
		self.failUnless(len(b3.update.announced) == 0)
		self.failUnless(len(b3.update.attributes) == 6)
		a = b3.update.attributes[0]
		self.failUnless(a.optional == False)
		self.failUnless(a.transitive == True)
		self.failUnless(a.partial == False)
		self.failUnless(a.extended_length == False)
		self.failUnless(a.type == bgp.ORIGIN)
		self.failUnless(a.len == 1)
		o = a.origin
		self.failUnless(o.type == bgp.ORIGIN_IGP)
		a = b3.update.attributes[5]
		self.failUnless(a.optional == True)
		self.failUnless(a.transitive == False)
		self.failUnless(a.partial == False)
		self.failUnless(a.extended_length == True)
		self.failUnless(a.type == bgp.MP_REACH_NLRI)
		self.failUnless(a.len == 30)
		m = a.mp_reach_nlri
		self.failUnless(m.afi == bgp.AFI_IPV4)
		self.failUnless(len(m.snpas) == 0)
		self.failUnless(len(m.announced) == 1)
		p = m.announced[0]
		self.failUnless(p.len == 96)

		b4 = BGP(self.bgp4)
		self.failUnless(b4.len == 45)
		self.failUnless(b4.type == bgp.OPEN)
		self.failUnless(b4.open.asn == 237)
		self.failUnless(b4.open.param_len == 16)
		self.failUnless(len(b4.open.parameters) == 3)
		p = b4.open.parameters[0]
		self.failUnless(p.type == bgp.CAPABILITY)
		self.failUnless(p.len == 6)
		c = p.capability
		self.failUnless(c.code == bgp.CAP_MULTIPROTOCOL)
		self.failUnless(c.len == 4)
		self.failUnless(c.data == b'\x00\x01\x00\x01')
		c = b4.open.parameters[2].capability
		self.failUnless(c.code == bgp.CAP_ROUTE_REFRESH)
		self.failUnless(c.len == 0)

	bgp1 = b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x13\x04'
	bgp2 = b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x63\x02\x00\x00\x00\x48\x40\x01\x01\x00\x40\x02\x0a\x01\x02\x01\xf4\x01\xf4\x02\x01\xfe\xbb\x40\x03\x04\xc0\xa8\x00\x0f\x40\x05\x04\x00\x00\x00\x64\x40\x06\x00\xc0\x07\x06\xfe\xba\xc0\xa8\x00\x0a\xc0\x08\x0c\xfe\xbf\x00\x01\x03\x16\x00\x04\x01\x54\x00\xfa\x80\x09\x04\xc0\xa8\x00\x0f\x80\x0a\x04\xc0\xa8\x00\xfa\x16\xc0\xa8\x04'
	bgp3 = b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x79\x02\x00\x00\x00\x62\x40\x01\x01\x00\x40\x02\x00\x40\x05\x04\x00\x00\x00\x64\xc0\x10\x08\x00\x02\x01\x2c\x00\x00\x01\x2c\xc0\x80\x24\x00\x00\xfd\xe9\x40\x01\x01\x00\x40\x02\x04\x02\x01\x15\xb3\x40\x05\x04\x00\x00\x00\x2c\x80\x09\x04\x16\x05\x05\x05\x80\x0a\x04\x16\x05\x05\x05\x90\x0e\x00\x1e\x00\x01\x80\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x04\x04\x04\x00\x60\x18\x77\x01\x00\x00\x01\xf4\x00\x00\x01\xf4\x85'
	bgp4 = b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x2d\x01\x04\x00\xed\x00\x5a\xc6\x6e\x83\x7d\x10\x02\x06\x01\x04\x00\x01\x00\x01\x02\x02\x80\x00\x02\x02\x02\x00'

class DHCPTestCast(unittest.TestCase):
	def test_DHCP(self):
		s = b'\x01\x01\x06\x00\xadS\xc8c\xb8\x87\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02U\x82\xf3\xa6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00c\x82Sc5\x01\x01\xfb\x01\x01=\x07\x01\x00\x02U\x82\xf3\xa62\x04\n\x00\x01e\x0c\tGuinevere<\x08MSFT 5.07\n\x01\x0f\x03\x06,./\x1f!+\xff\x00\x00\x00\x00\x00'
		dhcp = DHCP(s)
		self.failUnless(s == str(dhcp))

class DiameterTestCase(unittest.TestCase):
	def testPack(self):
		d = Diameter(self.s)
		self.failUnless(self.s == str(d))
		d = Diameter(self.t)
		self.failUnless(self.t == str(d))

	def testUnpack(self):
		d = Diameter(self.s)
		self.failUnless(d.len == 40)
		#self.failUnless(d.cmd == DEVICE_WATCHDOG_REQUEST)
		self.failUnless(d.request_flag == 1)
		self.failUnless(d.error_flag == 0)
		self.failUnless(len(d.avps) == 2)

		avp = d.avps[0]
		#self.failUnless(avp.code == ORIGIN_HOST)
		self.failUnless(avp.mandatory_flag == 1)
		self.failUnless(avp.vendor_flag == 0)
		self.failUnless(avp.len == 12)
		self.failUnless(len(avp) == 12)
		self.failUnless(avp.data == b'\x68\x30\x30\x32')

		# also test the optional vendor id support
		d = Diameter(self.t)
		self.failUnless(d.len == 44)
		avp = d.avps[0]
		self.failUnless(avp.vendor_flag == 1)
		self.failUnless(avp.len == 16)
		self.failUnless(len(avp) == 16)
		self.failUnless(avp.vendor == 3735928559)
		self.failUnless(avp.data == b'\x68\x30\x30\x32')

	s = b'\x01\x00\x00\x28\x80\x00\x01\x18\x00\x00\x00\x00\x00\x00\x41\xc8\x00\x00\x00\x0c\x00\x00\x01\x08\x40\x00\x00\x0c\x68\x30\x30\x32\x00\x00\x01\x28\x40\x00\x00\x08'
	t = b'\x01\x00\x00\x2c\x80\x00\x01\x18\x00\x00\x00\x00\x00\x00\x41\xc8\x00\x00\x00\x0c\x00\x00\x01\x08\xc0\x00\x00\x10\xde\xad\xbe\xef\x68\x30\x30\x32\x00\x00\x01\x28\x40\x00\x00\x08'


class DNSTestCase(unittest.TestCase):
	def test_basic(self):
		s = b'E\x00\x02\x08\xc15\x00\x00\x80\x11\x92aBk0\x01Bk0w\x005\xc07\x01\xf4\xda\xc2d\xd2\x81\x80\x00\x01\x00\x03\x00\x0b\x00\x0b\x03www\x06google\x03com\x00\x00\x01\x00\x01\xc0\x0c\x00\x05\x00\x01\x00\x00\x03V\x00\x17\x03www\x06google\x06akadns\x03net\x00\xc0,\x00\x01\x00\x01\x00\x00\x01\xa3\x00\x04@\xe9\xabh\xc0,\x00\x01\x00\x01\x00\x00\x01\xa3\x00\x04@\xe9\xabc\xc07\x00\x02\x00\x01\x00\x00KG\x00\x0c\x04usw5\x04akam\xc0>\xc07\x00\x02\x00\x01\x00\x00KG\x00\x07\x04usw6\xc0t\xc07\x00\x02\x00\x01\x00\x00KG\x00\x07\x04usw7\xc0t\xc07\x00\x02\x00\x01\x00\x00KG\x00\x08\x05asia3\xc0t\xc07\x00\x02\x00\x01\x00\x00KG\x00\x05\x02za\xc07\xc07\x00\x02\x00\x01\x00\x00KG\x00\x0f\x02zc\x06akadns\x03org\x00\xc07\x00\x02\x00\x01\x00\x00KG\x00\x05\x02zf\xc07\xc07\x00\x02\x00\x01\x00\x00KG\x00\x05\x02zh\xc0\xd5\xc07\x00\x02\x00\x01\x00\x00KG\x00\x07\x04eur3\xc0t\xc07\x00\x02\x00\x01\x00\x00KG\x00\x07\x04use2\xc0t\xc07\x00\x02\x00\x01\x00\x00KG\x00\x07\x04use4\xc0t\xc0\xc1\x00\x01\x00\x01\x00\x00\xfb4\x00\x04\xd0\xb9\x84\xb0\xc0\xd2\x00\x01\x00\x01\x00\x001\x0c\x00\x04?\xf1\xc76\xc0\xed\x00\x01\x00\x01\x00\x00\xfb4\x00\x04?\xd7\xc6S\xc0\xfe\x00\x01\x00\x01\x00\x001\x0c\x00\x04?\xd00.\xc1\x0f\x00\x01\x00\x01\x00\x00\n\xdf\x00\x04\xc1-\x01g\xc1"\x00\x01\x00\x01\x00\x00\x101\x00\x04?\xd1\xaa\x88\xc15\x00\x01\x00\x01\x00\x00\r\x1a\x00\x04PCC\xb6\xc0o\x00\x01\x00\x01\x00\x00\x10\x7f\x00\x04?\xf1I\xd6\xc0\x87\x00\x01\x00\x01\x00\x00\n\xdf\x00\x04\xce\x84dl\xc0\x9a\x00\x01\x00\x01\x00\x00\n\xdf\x00\x04A\xcb\xea\x1b\xc0\xad\x00\x01\x00\x01\x00\x00\x0b)\x00\x04\xc1l\x9a\t'
		ip = IP(s)
		dns = DNS(ip.udp.data)
		self.failUnless(dns.qd[0].name == 'www.google.com' and
						dns.an[1].name == 'www.google.akadns.net')
		s = b'\x05\xf5\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x03www\x03cnn\x03com\x00\x00\x01\x00\x01'
		dns = DNS(s)
		self.failUnless(s == str(dns))

	def test_PTR(self):
		s = b'g\x02\x81\x80\x00\x01\x00\x01\x00\x03\x00\x00\x011\x011\x03211\x03141\x07in-addr\x04arpa\x00\x00\x0c\x00\x01\xc0\x0c\x00\x0c\x00\x01\x00\x00\r6\x00$\x07default\nv-umce-ifs\x05umnet\x05umich\x03edu\x00\xc0\x0e\x00\x02\x00\x01\x00\x00\r6\x00\r\x06shabby\x03ifs\xc0O\xc0\x0e\x00\x02\x00\x01\x00\x00\r6\x00\x0f\x0cfish-license\xc0m\xc0\x0e\x00\x02\x00\x01\x00\x00\r6\x00\x0b\x04dns2\x03itd\xc0O'
		dns = DNS(s)
		self.failUnless(dns.qd[0].name == '1.1.211.141.in-addr.arpa' and
						dns.an[0].ptrname == 'default.v-umce-ifs.umnet.umich.edu' and
						dns.ns[0].nsname == 'shabby.ifs.umich.edu' and
						dns.ns[1].ttl == 3382 and
						dns.ns[2].nsname == 'dns2.itd.umich.edu')
		self.failUnless(s == str(dns))

	def test_pack_name(self):
		# Empty name is \0
		x = pack_name('', 0, {})
		self.assertEqual(x, b'\0')


#class EthTestCase(unittest.TestCase):
#	def test_eth(self):
#		s = b'\x00\xb0\xd0\xe1\x80r\x00\x11$\x8c\x11\xde\x86\xdd`\x00\x00\x00\x00(\x06@\xfe\x80\x00\x00\x00\x00\x00\x00\x02\x11$\xff\xfe\x8c\x11\xde\xfe\x80\x00\x00\x00\x00\x00\x00\x02\xb0\xd0\xff\xfe\xe1\x80r\xcd\xd3\x00\x16\xffP\xd7\x13\x00\x00\x00\x00\xa0\x02\xff\xffg\xd3\x00\x00\x02\x04\x05\xa0\x01\x03\x03\x00\x01\x01\x08\n}\x18:a\x00\x00\x00\x00'
#		eth = Ethernet(s)

#gz = Gzip(open(sys.argv[1]).read())
#print(repr(gz), repr(gz.decompress()))

class H225TestCase(unittest.TestCase):
	def testPack(self):
		h = H225(self.s)
		self.failUnless(self.s == str(h))

	def testUnpack(self):
		h = H225(self.s)
		self.failUnless(h.tpkt.v == 3)
		self.failUnless(h.tpkt.rsvd == 0)
		self.failUnless(h.tpkt.len == 1041)
		self.failUnless(h.proto == 8)
		self.failUnless(h.type == h225.SETUP)
		self.failUnless(len(h.data) == 3)

		ie = h.data[0]
		self.failUnless(ie.type == h225.BEARER_CAPABILITY)
		self.failUnless(ie.len == 3)
		ie = h.data[1]
		self.failUnless(ie.type == h225.DISPLAY)
		self.failUnless(ie.len == 14)
		ie = h.data[2]
		self.failUnless(ie.type == h225.USER_TO_USER)
		self.failUnless(ie.len == 1008)

	s = b'\x03\x00\x04\x11\x08\x02\x54\x2b\x05\x04\x03\x88\x93\xa5\x28\x0e\x4a\x6f\x6e\x20\x4f\x62\x65\x72\x68\x65\x69\x64\x65\x00\x7e\x03\xf0\x05\x20\xb8\x06\x00\x08\x91\x4a\x00\x04\x01\x40\x0c\x00\x4a\x00\x6f\x00\x6e\x00\x20\x00\x4f\x00\x62\x00\x65\x00\x72\x00\x68\x00\x65\x00\x69\x00\x64\x00\x65\x22\xc0\x09\x00\x00\x3d\x06\x65\x6b\x69\x67\x61\x00\x00\x14\x32\x2e\x30\x2e\x32\x20\x28\x4f\x50\x41\x4c\x20\x76\x32\x2e\x32\x2e\x32\x29\x00\x00\x00\x01\x40\x15\x00\x74\x00\x63\x00\x70\x00\x24\x00\x68\x00\x33\x00\x32\x00\x33\x00\x2e\x00\x76\x00\x6f\x00\x78\x00\x67\x00\x72\x00\x61\x00\x74\x00\x69\x00\x61\x00\x2e\x00\x6f\x00\x72\x00\x67\x00\x42\x87\x23\x2c\x06\xb8\x00\x6a\x8b\x1d\x0c\xb7\x06\xdb\x11\x9e\xca\x00\x10\xa4\x89\x6d\x6a\x00\xc5\x1d\x80\x04\x07\x00\x0a\x00\x01\x7a\x75\x30\x11\x00\x5e\x88\x1d\x0c\xb7\x06\xdb\x11\x9e\xca\x00\x10\xa4\x89\x6d\x6a\x82\x2b\x0e\x30\x40\x00\x00\x06\x04\x01\x00\x4c\x10\x09\x00\x00\x3d\x0f\x53\x70\x65\x65\x78\x20\x62\x73\x34\x20\x57\x69\x64\x65\x36\x80\x11\x1c\x00\x01\x00\x98\xa0\x26\x41\x13\x8a\x00\x98\xa0\x26\x41\x13\x8b\x26\x00\x00\x64\x0c\x10\x09\x00\x00\x3d\x0f\x53\x70\x65\x65\x78\x20\x62\x73\x34\x20\x57\x69\x64\x65\x36\x80\x0b\x0d\x00\x01\x00\x98\xa0\x26\x41\x13\x8b\x00\x2a\x40\x00\x00\x06\x04\x01\x00\x4c\x10\x09\x00\x00\x3d\x09\x69\x4c\x42\x43\x2d\x31\x33\x6b\x33\x80\x11\x1c\x00\x01\x00\x98\xa0\x26\x41\x13\x8a\x00\x98\xa0\x26\x41\x13\x8b\x20\x00\x00\x65\x0c\x10\x09\x00\x00\x3d\x09\x69\x4c\x42\x43\x2d\x31\x33\x6b\x33\x80\x0b\x0d\x00\x01\x00\x98\xa0\x26\x41\x13\x8b\x00\x20\x40\x00\x00\x06\x04\x01\x00\x4e\x0c\x03\x00\x83\x00\x80\x11\x1c\x00\x01\x00\x98\xa0\x26\x41\x13\x8a\x00\x98\xa0\x26\x41\x13\x8b\x16\x00\x00\x66\x0e\x0c\x03\x00\x83\x00\x80\x0b\x0d\x00\x01\x00\x98\xa0\x26\x41\x13\x8b\x00\x4b\x40\x00\x00\x06\x04\x01\x00\x4c\x10\xb5\x00\x53\x4c\x2a\x02\x00\x00\x00\x00\x00\x40\x01\x00\x00\x40\x01\x02\x00\x08\x00\x00\x00\x00\x00\x31\x00\x01\x00\x40\x1f\x00\x00\x59\x06\x00\x00\x41\x00\x00\x00\x02\x00\x40\x01\x00\x00\x80\x11\x1c\x00\x01\x00\x98\xa0\x26\x41\x13\x8a\x00\x98\xa0\x26\x41\x13\x8b\x41\x00\x00\x67\x0c\x10\xb5\x00\x53\x4c\x2a\x02\x00\x00\x00\x00\x00\x40\x01\x00\x00\x40\x01\x02\x00\x08\x00\x00\x00\x00\x00\x31\x00\x01\x00\x40\x1f\x00\x00\x59\x06\x00\x00\x41\x00\x00\x00\x02\x00\x40\x01\x00\x00\x80\x0b\x0d\x00\x01\x00\x98\xa0\x26\x41\x13\x8b\x00\x32\x40\x00\x00\x06\x04\x01\x00\x4c\x10\x09\x00\x00\x3d\x11\x53\x70\x65\x65\x78\x20\x62\x73\x34\x20\x4e\x61\x72\x72\x6f\x77\x33\x80\x11\x1c\x00\x01\x00\x98\xa0\x26\x41\x13\x8a\x00\x98\xa0\x26\x41\x13\x8b\x28\x00\x00\x68\x0c\x10\x09\x00\x00\x3d\x11\x53\x70\x65\x65\x78\x20\x62\x73\x34\x20\x4e\x61\x72\x72\x6f\x77\x33\x80\x0b\x0d\x00\x01\x00\x98\xa0\x26\x41\x13\x8b\x00\x1d\x40\x00\x00\x06\x04\x01\x00\x4c\x60\x1d\x80\x11\x1c\x00\x01\x00\x98\xa0\x26\x41\x13\x8a\x00\x98\xa0\x26\x41\x13\x8b\x13\x00\x00\x69\x0c\x60\x1d\x80\x0b\x0d\x00\x01\x00\x98\xa0\x26\x41\x13\x8b\x00\x1d\x40\x00\x00\x06\x04\x01\x00\x4c\x20\x1d\x80\x11\x1c\x00\x01\x00\x98\xa0\x26\x41\x13\x8a\x00\x98\xa0\x26\x41\x13\x8b\x13\x00\x00\x6a\x0c\x20\x1d\x80\x0b\x0d\x00\x01\x00\x98\xa0\x26\x41\x13\x8b\x00\x01\x00\x01\x00\x01\x00\x01\x00\x81\x03\x02\x80\xf8\x02\x70\x01\x06\x00\x08\x81\x75\x00\x0b\x80\x13\x80\x01\xf4\x00\x01\x00\x00\x01\x00\x00\x01\x00\x00\x0c\xc0\x01\x00\x01\x80\x0b\x80\x00\x00\x20\x20\x09\x00\x00\x3d\x0f\x53\x70\x65\x65\x78\x20\x62\x73\x34\x20\x57\x69\x64\x65\x36\x80\x00\x01\x20\x20\x09\x00\x00\x3d\x09\x69\x4c\x42\x43\x2d\x31\x33\x6b\x33\x80\x00\x02\x24\x18\x03\x00\xe6\x00\x80\x00\x03\x20\x20\xb5\x00\x53\x4c\x2a\x02\x00\x00\x00\x00\x00\x40\x01\x00\x00\x40\x01\x02\x00\x08\x00\x00\x00\x00\x00\x31\x00\x01\x00\x40\x1f\x00\x00\x59\x06\x00\x00\x41\x00\x00\x00\x02\x00\x40\x01\x00\x00\x80\x00\x04\x20\x20\x09\x00\x00\x3d\x11\x53\x70\x65\x65\x78\x20\x62\x73\x34\x20\x4e\x61\x72\x72\x6f\x77\x33\x80\x00\x05\x20\xc0\xef\x80\x00\x06\x20\x40\xef\x80\x00\x07\x08\xe0\x03\x51\x00\x80\x01\x00\x80\x00\x08\x08\xd0\x03\x51\x00\x80\x01\x00\x80\x00\x09\x83\x01\x50\x80\x00\x0a\x83\x01\x10\x80\x00\x0b\x83\x01\x40\x00\x80\x01\x03\x06\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x01\x00\x07\x00\x08\x00\x00\x09\x01\x00\x0a\x00\x0b\x07\x01\x00\x32\x80\xa6\xff\x4c\x02\x80\x01\x80'


class HTTPTest(unittest.TestCase):
	def test_parse_request(self):
		s = "POST /main/redirect/ab/1,295,,00.html HTTP/1.0\r\nReferer: http://www.email.com/login/snap/login.jhtml\r\nConnection: Keep-Alive\r\nUser-Agent: Mozilla/4.75 [en] (X11; U; OpenBSD 2.8 i386; Nav)\r\nHost: ltd.snap.com\r\nAccept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*\r\nAccept-Encoding: gzip\r\nAccept-Language: en\r\nAccept-Charset: iso-8859-1,*,utf-8\r\nContent-type: application/x-www-form-urlencoded\r\nContent-length: 61\r\n\r\nsn=em&mn=dtest4&pw=this+is+atest&fr=true&login=Sign+in&od=www"
		r = Request(s)
		assert r.method == 'POST'
		assert r.uri == '/main/redirect/ab/1,295,,00.html'
		assert r.body == 'sn=em&mn=dtest4&pw=this+is+atest&fr=true&login=Sign+in&od=www'
		assert r.headers['content-type'] == 'application/x-www-form-urlencoded'
		try:
			r = Request(s[:60])
			assert 'invalid headers parsed!'
		except UnpackError:
			pass

	def test_format_request(self):
		r = Request()
		assert str(r) == "GET / HTTP/1.0\r\n\r\n"
		r.method = "POST"
		r.uri = "/foo/bar/baz.html"
		r.headers["content-type"] = "text/plain"
		r.headers["content-length"] = "5"
		r.body = "hello"
		assert str(r) == "POST /foo/bar/baz.html HTTP/1.0\r\ncontent-length: 5\r\ncontent-type: text/plain\r\n\r\nhello"
		r = Request(str(r))
		assert str(r) == "POST /foo/bar/baz.html HTTP/1.0\r\ncontent-length: 5\r\ncontent-type: text/plain\r\n\r\nhello"

	def test_chunked_response(self):
		s = "HTTP/1.1 200 OK\r\nCache-control: no-cache\r\nPragma: no-cache\r\nContent-Type: text/javascript; charset=utf-8\r\nContent-Encoding: gzip\r\nTransfer-Encoding: chunked\r\nSet-Cookie: S=gmail=agg:gmail_yj=v2s:gmproxy=JkU; Domain=.google.com; Path=/\r\nServer: GFE/1.3\r\nDate: Mon, 12 Dec 2005 22:33:23 GMT\r\n\r\na\r\n\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x00\r\n152\r\nm\x91MO\xc4 \x10\x86\xef\xfe\n\x82\xc9\x9eXJK\xe9\xb6\xee\xc1\xe8\x1e6\x9e4\xf1\xe0a5\x86R\xda\x12Yh\x80\xba\xfa\xef\x85\xee\x1a/\xf21\x99\x0c\xef0<\xc3\x81\xa0\xc3\x01\xe6\x10\xc1<\xa7eYT5\xa1\xa4\xac\xe1\xdb\x15:\xa4\x9d\x0c\xfa5K\x00\xf6.\xaa\xeb\x86\xd5y\xcdHY\x954\x8e\xbc*h\x8c\x8e!L7Y\xe6\'\xeb\x82WZ\xcf>8\x1ed\x87\x851X\xd8c\xe6\xbc\x17Z\x89\x8f\xac \x84e\xde\n!]\x96\x17i\xb5\x02{{\xc2z0\x1e\x0f#7\x9cw3v\x992\x9d\xfc\xc2c8\xea[/EP\xd6\xbc\xce\x84\xd0\xce\xab\xf7`\'\x1f\xacS\xd2\xc7\xd2\xfb\x94\x02N\xdc\x04\x0f\xee\xba\x19X\x03TtW\xd7\xb4\xd9\x92\n\xbcX\xa7;\xb0\x9b\'\x10$?F\xfd\xf3CzPt\x8aU\xef\xb8\xc8\x8b-\x18\xed\xec<\xe0\x83\x85\x08!\xf8X[\xb0\xd3j\x82h\x93\xb8\xcf\xd8\x9b\xba\xda\xd0\x92\x14\xa4a\rc\reM\xfd\x87=X;h\xd9j;\xe0db\x17\xc2\x02\xbd\xb0F\xc2in#\xfb:\xb6\xc4x\x15\xd6\x9f\x8a\xaf\xcf)\x0b^\xbc\xe7i\x11\x80\x8b\x00D\x01\xd8/\x82x\xf6\xd8\xf7J(\xae/\x11p\x1f+\xc4p\t:\xfe\xfd\xdf\xa3Y\xfa\xae4\x7f\x00\xc5\xa5\x95\xa1\xe2\x01\x00\x00\r\n0\r\n\r\n"
		r = Response(s)
		assert r.version == '1.1'
		assert r.status == '200'
		assert r.reason == 'OK'

	def test_multicookie_response(self):
		s = "HTTP/1.x 200 OK\r\nSet-Cookie: first_cookie=cookie1; path=/; domain=.example.com\r\nSet-Cookie: second_cookie=cookie2; path=/; domain=.example.com\r\nContent-Length: 0\r\n\r\n"
		r = Response(s)
		assert type(r.headers['set-cookie']) is list
		assert len(r.headers['set-cookie']) == 2

	def test_request_version(self):
		s = "GET / HTTP/1.0\r\n\r\n"
		r = Request(s)
		assert r.method == 'GET'
		assert r.uri == '/'
		assert r.version == '1.0'

		s = """GET /\r\n\r\n"""
		r = Request(s)
		assert r.method == 'GET'
		assert r.uri == '/'
		assert r.version == '0.9'

		s = """GET / CHEESE/1.0\r\n\r\n"""
		try:
			r = Request(s)
			assert "invalid protocol version parsed!"
		except:
			pass


class ICMPTestCase(unittest.TestCase):
	def test_ICMP(self):
		s = b'\x03\x0a\x6b\x19\x00\x00\x00\x00\x45\x00\x00\x28\x94\x1f\x00\x00\xe3\x06\x99\xb4\x23\x2b\x24\x00\xde\x8e\x84\x42\xab\xd1\x00\x50\x00\x35\xe1\x29\x20\xd9\x00\x00\x00\x22\x9b\xf0\xe2\x04\x65\x6b'
		icmp = ICMP(s)
		self.failUnless(str(icmp) == s)


class IEEE80211TestCase(unittest.TestCase):
	def test_802211(self):
		s = b'\xd4\x00\x00\x00\x00\x12\xf0\xb6\x1c\xa4'
		ieee = IEEE80211(s)
		self.failUnless(ieee.version == 0)
		self.failUnless(ieee.type == ieee80211.CTL_TYPE)
		self.failUnless(ieee.subtype == ieee80211.C_ACK)
		self.failUnless(ieee.to_ds == 0)
		self.failUnless(ieee.from_ds == 0)
		self.failUnless(ieee.pwr_mgt == 0)
		self.failUnless(ieee.more_data == 0)
		self.failUnless(ieee.wep == 0)
		self.failUnless(ieee.order == 0)
		self.failUnless(ieee.ack.dst == b'\x00\x12\xf0\xb6\x1c\xa4')

	def test_80211_beacon(self):
		s= b'\x80\x00\x00\x00\xff\xff\xff\xff\xff\xff\x00\x26\xcb\x18\x6a\x30\x00\x26\xcb\x18\x6a\x30\xa0\xd0\x77\x09\x32\x03\x8f\x00\x00\x00\x66\x00\x31\x04\x00\x04\x43\x41\x45\x4e\x01\x08\x82\x84\x8b\x0c\x12\x96\x18\x24\x03\x01\x01\x05\x04\x00\x01\x00\x00\x07\x06\x55\x53\x20\x01\x0b\x1a\x0b\x05\x00\x00\x6e\x00\x00\x2a\x01\x02\x2d\x1a\x6e\x18\x1b\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x01\x28\x00\x32\x04\x30\x48\x60\x6c\x36\x03\x51\x63\x03\x3d\x16\x01\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x85\x1e\x05\x00\x8f\x00\x0f\x00\xff\x03\x59\x00\x63\x73\x65\x2d\x33\x39\x31\x32\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x36\x96\x06\x00\x40\x96\x00\x14\x00\xdd\x18\x00\x50\xf2\x02\x01\x01\x80\x00\x03\xa4\x00\x00\x27\xa4\x00\x00\x42\x43\x5e\x00\x62\x32\x2f\x00\xdd\x06\x00\x40\x96\x01\x01\x04\xdd\x05\x00\x40\x96\x03\x05\xdd\x05\x00\x40\x96\x0b\x09\xdd\x08\x00\x40\x96\x13\x01\x00\x34\x01\xdd\x05\x00\x40\x96\x14\x05'
		ieee = IEEE80211(s)
		self.failUnless(ieee.version == 0)
		self.failUnless(ieee.type == ieee80211.MGMT_TYPE)
		self.failUnless(ieee.subtype == ieee80211.M_BEACON)
		self.failUnless(ieee.to_ds == 0)
		self.failUnless(ieee.from_ds == 0)
		self.failUnless(ieee.pwr_mgt == 0)
		self.failUnless(ieee.more_data == 0)
		self.failUnless(ieee.wep == 0)
		self.failUnless(ieee.order == 0)
		self.failUnless(ieee.mgmt.dst == b'\xff\xff\xff\xff\xff\xff')
		self.failUnless(ieee.mgmt.src == b'\x00\x26\xcb\x18\x6a\x30')
		self.failUnless(ieee.beacon.capability == 0x3104)
		self.failUnless(ieee.capability.privacy == 1)
		self.failUnless(ieee.ssid.data == 'CAEN')
		self.failUnless(ieee.rate.data == b'\x82\x84\x8b\x0c\x12\x96\x18\x24')
		self.failUnless(ieee.ds.data == b'\x01')
		self.failUnless(ieee.tim.data == b'\x00\x01\x00\x00')

	def test_80211_data(self):
		s = b'\x08\x09\x20\x00\x00\x26\xcb\x17\x3d\x91\x00\x16\x44\xb0\xae\xc6\x00\x02\xb3\xd6\x26\x3c\x80\x7e\xaa\xaa\x03\x00\x00\x00\x08\x00\x45\x00\x00\x28\x07\x27\x40\x00\x80\x06\x1d\x39\x8d\xd4\x37\x3d\x3f\xf5\xd1\x69\xc0\x5f\x01\xbb\xb2\xd6\xef\x23\x38\x2b\x4f\x08\x50\x10\x42\x04\xac\x17\x00\x00'
		ieee = IEEE80211(s)
		self.failUnless(ieee.type == ieee80211.DATA_TYPE)
		self.failUnless(ieee.subtype == ieee80211.D_DATA)
		self.failUnless(ieee.data_frame.dst == b'\x00\x02\xb3\xd6\x26\x3c')
		self.failUnless(ieee.data_frame.src == b'\x00\x16\x44\xb0\xae\xc6')
		self.failUnless(ieee.data_frame.frag_seq == 0x807e)
		self.failUnless(ieee.data == b'\xaa\xaa\x03\x00\x00\x00\x08\x00\x45\x00\x00\x28\x07\x27\x40\x00\x80\x06\x1d\x39\x8d\xd4\x37\x3d\x3f\xf5\xd1\x69\xc0\x5f\x01\xbb\xb2\xd6\xef\x23\x38\x2b\x4f\x08\x50\x10\x42\x04\xac\x17\x00\x00')

		llc_pkt = LLC(ieee.data_frame.data)
		ip_pkt = IP(llc_pkt.data)
		self.failUnless(ip_pkt.dst == b'\x3f\xf5\xd1\x69')

	def test_80211_data_qos(self):
		s = b'\x88\x01\x3a\x01\x00\x26\xcb\x17\x44\xf0\x00\x23\xdf\xc9\xc0\x93\x00\x26\xcb\x17\x44\xf0\x20\x7b\x00\x00\xaa\xaa\x03\x00\x00\x00\x88\x8e\x01\x00\x00\x74\x02\x02\x00\x74\x19\x80\x00\x00\x00\x6a\x16\x03\x01\x00\x65\x01\x00\x00\x61\x03\x01\x4b\x4c\xa7\x7e\x27\x61\x6f\x02\x7b\x3c\x72\x39\xe3\x7b\xd7\x43\x59\x91\x7f\xaa\x22\x47\x51\xb6\x88\x9f\x85\x90\x87\x5a\xd1\x13\x20\xe0\x07\x00\x00\x68\xbd\xa4\x13\xb0\xd5\x82\x7e\xc7\xfb\xe7\xcc\xab\x6e\x5d\x5a\x51\x50\xd4\x45\xc5\xa1\x65\x53\xad\xb5\x88\x5b\x00\x1a\x00\x2f\x00\x05\x00\x04\x00\x35\x00\x0a\x00\x09\x00\x03\x00\x08\x00\x33\x00\x39\x00\x16\x00\x15\x00\x14\x01\x00'
		ieee = IEEE80211(s)
		self.failUnless(ieee.type == ieee80211.DATA_TYPE)
		self.failUnless(ieee.subtype == ieee80211.D_QOS_DATA)
		self.failUnless(ieee.data_frame.dst == b'\x00\x26\xcb\x17\x44\xf0')
		self.failUnless(ieee.data_frame.src == b'\x00\x23\xdf\xc9\xc0\x93')
		self.failUnless(ieee.data_frame.frag_seq == 0x207b)
		self.failUnless(ieee.data == b'\xaa\xaa\x03\x00\x00\x00\x88\x8e\x01\x00\x00\x74\x02\x02\x00\x74\x19\x80\x00\x00\x00\x6a\x16\x03\x01\x00\x65\x01\x00\x00\x61\x03\x01\x4b\x4c\xa7\x7e\x27\x61\x6f\x02\x7b\x3c\x72\x39\xe3\x7b\xd7\x43\x59\x91\x7f\xaa\x22\x47\x51\xb6\x88\x9f\x85\x90\x87\x5a\xd1\x13\x20\xe0\x07\x00\x00\x68\xbd\xa4\x13\xb0\xd5\x82\x7e\xc7\xfb\xe7\xcc\xab\x6e\x5d\x5a\x51\x50\xd4\x45\xc5\xa1\x65\x53\xad\xb5\x88\x5b\x00\x1a\x00\x2f\x00\x05\x00\x04\x00\x35\x00\x0a\x00\x09\x00\x03\x00\x08\x00\x33\x00\x39\x00\x16\x00\x15\x00\x14\x01\x00')
		self.failUnless(ieee.qos_data.control == 0x0)

	def test_bug(self):
		s= b'\x88\x41\x2c\x00\x00\x26\xcb\x17\x44\xf0\x00\x1e\x52\x97\x14\x11\x00\x1f\x6d\xe8\x18\x00\xd0\x07\x00\x00\x6f\x00\x00\x20\x00\x00\x00\x00'
		ieee = IEEE80211(s)
		self.failUnless(ieee.wep == 1)

	def test_data_ds(self):
		# verifying the ToDS and FromDS fields and that we're getting the
		# correct values

		s = b'\x08\x03\x00\x00\x01\x0b\x85\x00\x00\x00\x00\x26\xcb\x18\x73\x50\x01\x0b\x85\x00\x00\x00\x00\x89\x00\x26\xcb\x18\x73\x50'
		ieee = IEEE80211(s)
		self.failUnless(ieee.type == ieee80211.DATA_TYPE)
		self.failUnless(ieee.to_ds == 1)
		self.failUnless(ieee.from_ds == 1)
		self.failUnless(ieee.data_frame.sa == b'\x00\x26\xcb\x18\x73\x50')
		self.failUnless(ieee.data_frame.src == b'\x00\x26\xcb\x18\x73\x50')
		self.failUnless(ieee.data_frame.dst == b'\x01\x0b\x85\x00\x00\x00')
		self.failUnless(ieee.data_frame.da == b'\x01\x0b\x85\x00\x00\x00')

		s = b'\x88\x41\x50\x01\x00\x26\xcb\x17\x48\xc1\x00\x24\x2c\xe7\xfe\x8a\xff\xff\xff\xff\xff\xff\x80\xa0\x00\x00\x09\x1a\x00\x20\x00\x00\x00\x00'
		ieee = IEEE80211(s)
		self.failUnless(ieee.type == ieee80211.DATA_TYPE)
		self.failUnless(ieee.to_ds == 1)
		self.failUnless(ieee.from_ds == 0)
		self.failUnless(ieee.data_frame.bssid == b'\x00\x26\xcb\x17\x48\xc1')
		self.failUnless(ieee.data_frame.src == b'\x00\x24\x2c\xe7\xfe\x8a')
		self.failUnless(ieee.data_frame.dst == b'\xff\xff\xff\xff\xff\xff')

		s = b'\x08\x02\x02\x01\x00\x02\x44\xac\x27\x70\x00\x1f\x33\x39\x75\x44\x00\x1f\x33\x39\x75\x44\x90\xa4'
		ieee = IEEE80211(s)
		self.failUnless(ieee.type == ieee80211.DATA_TYPE)
		self.failUnless(ieee.to_ds == 0)
		self.failUnless(ieee.from_ds == 1)
		self.failUnless(ieee.data_frame.bssid == b'\x00\x1f\x33\x39\x75\x44')
		self.failUnless(ieee.data_frame.src == b'\x00\x1f\x33\x39\x75\x44')
		self.failUnless(ieee.data_frame.dst == b'\x00\x02\x44\xac\x27\x70')


class IPTestCase(unittest.TestCase):
	def test_IP(self):
		s = b'E\x00\x00"\x00\x00\x00\x00@\x11r\xc0\x01\x02\x03\x04\x01\x02\x03\x04\x00o\x00\xde\x00\x0e\xbf5foobar'
		ip = IP(id=0, src=b'\x01\x02\x03\x04', dst=b'\x01\x02\x03\x04', p=17)
		u = UDP(sport=111, dport=222)
		u.data = 'foobar'
		u.ulen += len(u.data)
		ip.data = u
		ip.len += len(u)
		self.failUnless(str(ip) == s)

		ip = IP(s)
		self.failUnless(str(ip) == s)
		self.failUnless(ip.udp.sport == 111)
		self.failUnless(ip.udp.data == 'foobar')

	def test_hl(self):
		s = b'BB\x03\x00\x00\x00\x00\x00\x00\x00\xd0\x00\xec\xbc\xa5\x00\x00\x00\x03\x80\x00\x00\xd0\x01\xf2\xac\xa5"0\x01\x00\x14\x00\x02\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00'
		try:
			ip = IP(s)
		except UnpackError:
			pass

	def test_opt(self):
		s = b'\x4f\x00\x00\x50\xae\x08\x00\x00\x40\x06\x17\xfc\xc0\xa8\x0a\x26\xc0\xa8\x0a\x01\x07\x27\x08\x01\x02\x03\x04\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
		ip = IP(s)
		ip.sum = 0
		self.failUnless(str(ip) == s)


class IP6TestCase(unittest.TestCase):

	def test_IP6(self):
		s = b'`\x00\x00\x00\x00(\x06@\xfe\x80\x00\x00\x00\x00\x00\x00\x02\x11$\xff\xfe\x8c\x11\xde\xfe\x80\x00\x00\x00\x00\x00\x00\x02\xb0\xd0\xff\xfe\xe1\x80r\xcd\xca\x00\x16\x04\x84F\xd5\x00\x00\x00\x00\xa0\x02\xff\xff\xf8\t\x00\x00\x02\x04\x05\xa0\x01\x03\x03\x00\x01\x01\x08\n}\x185?\x00\x00\x00\x00'
		ip = IP6(s)
		#print `ip`
		ip.data.sum = 0
		s2 = str(ip)
		ip2 = IP6(s)
		#print `ip2`
		assert(s == s2)

	def test_IP6RoutingHeader(self):
		s = b'`\x00\x00\x00\x00<+@ H\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xde\xca G\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xca\xfe\x06\x04\x00\x02\x00\x00\x00\x00 \x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xde\xca "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xde\xca\x00\x14\x00P\x00\x00\x00\x00\x00\x00\x00\x00P\x02 \x00\x91\x7f\x00\x00'
		ip = IP6(s)
		s2 = str(ip)
		# 43 is Routing header id
		assert(len(ip.extension_hdrs[43].addresses) == 2)
		assert(ip.tcp)
		assert(s == s2)


	def test_IP6FragmentHeader(self):
		s = b'\x06\xee\xff\xfb\x00\x00\xff\xff'
		fh = IP6FragmentHeader(s)
		s2 = str(fh)
		assert(fh.nxt == 6)
		assert(fh.id == 65535)
		assert(fh.frag_off == 8191)
		assert(fh.m_flag == 1)

	def test_IP6OptionsHeader(self):
		s = b';\x04\x01\x02\x00\x00\xc9\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xc2\x04\x00\x00\x00\x00\x05\x02\x00\x00\x01\x02\x00\x00'
		options = IP6OptsHeader(s).options
		assert(len(options) == 3)

	def test_IP6AHHeader(self):
		s = b';\x04\x00\x00\x02\x02\x02\x02\x01\x01\x01\x01\x78\x78\x78\x78\x78\x78\x78\x78'
		ah = IP6AHHeader(s)
		assert(ah.length == 24)
		assert(ah.auth_data == 'xxxxxxxx')
		assert(ah.spi == 0x2020202)
		assert(ah.seq == 0x1010101)

	def test_IP6ExtensionHeaders(self):
		p = b'`\x00\x00\x00\x00<+@ H\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xde\xca G\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xca\xfe\x06\x04\x00\x02\x00\x00\x00\x00 \x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xde\xca "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xde\xca\x00\x14\x00P\x00\x00\x00\x00\x00\x00\x00\x00P\x02 \x00\x91\x7f\x00\x00'
		ip = IP6(p)

		o = b';\x04\x01\x02\x00\x00\xc9\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xc2\x04\x00\x00\x00\x00\x05\x02\x00\x00\x01\x02\x00\x00'
		options = IP6HopOptsHeader(o)

		ip.extension_hdrs[0] = options

		fh = b'\x06\xee\xff\xfb\x00\x00\xff\xff'
		ip.extension_hdrs[44] = IP6FragmentHeader(fh)

		ah = b';\x04\x00\x00\x02\x02\x02\x02\x01\x01\x01\x01\x78\x78\x78\x78\x78\x78\x78\x78'
		ip.extension_hdrs[51] = IP6AHHeader(ah)

		do = b';\x02\x01\x02\x00\x00\xc9\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
		ip.extension_hdrs[60] = IP6DstOptsHeader(do)

		assert(len([k for k in ip.extension_hdrs if (not ip.extension_hdrs[k] is None)]) == 5)

	# fix https://code.google.com/p/dpkt/issues/attachmentText?id=59
	def test_IP6DataChecksumFill(self):
		s = b'\x60\x00\x00\x00\x00\x24\x00\x01\xfe\x80\x00\x00\x00\x00\x00\x00\x02\xd0\x09\xff\xfe\xe3\xe8\xde\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x3a\x00\x05\x02\x00\x00\x01\x00\x8f\x00\x74\xfe\x00\x00\x00\x01\x04\x00\x00\x00\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\x98\x06\xe1\x8f\x00\x74\xfe\x00\x00\x00\x01\x04\x00\x00\x00\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\x98\x06\xe1'
		ip = IP6(s)
		origsum = ip.data.sum
		ip.data.sum = 0
		fillsum = str(ip) and ip.data.sum
		assert(fillsum and ip.data.sum == origsum)

class LLCTestCase(unittest.TestCase):

	def test_llc(self):
		s = b'\xaa\xaa\x03\x00\x00\x00\x08\x00\x45\x00\x00\x28\x07\x27\x40\x00\x80\x06\x1d\x39\x8d\xd4\x37\x3d\x3f\xf5\xd1\x69\xc0\x5f\x01\xbb\xb2\xd6\xef\x23\x38\x2b\x4f\x08\x50\x10\x42\x04\xac\x17\x00\x00'

		llc_pkt = LLC(s)
		ip_pkt = IP(llc_pkt.data)
		self.failUnless(llc_pkt.type == ethernet.ETH_TYPE_IP)
		self.failUnless(ip_pkt.dst == b'\x3f\xf5\xd1\x69')


class LLDPTestCase():
# TODO: not yet implemented
#class LLDPTestCase(unittest.TestCase):
	# TODO:XXX more test cases

	def test_lldp(self):
		data = b'\x02\x11\x07' + b"deadbeefcafecafe" \
			   b'\x04\x05\x07' + b"0008" \
			   b'\x06\x02\x00\x3c' \
			   b'\x00\x00'
		lldp = LLDP(data)
		if (data != lldp.pack()):
			raise dpkt.PackError

	def test_eth_lldp(self):
		data = b'\x80\x48\x00\x00\x00\x00' \
			  b'\x80\x48\x00\x00\x00\x00' \
			  b'\x88\xcc' \
			  b'\x02\x11\x07' + b"deadbeefcafecafe" \
			  b'\x04\x05\x07' + b"0008" \
			  b'\x06\x02\x00\x3c' \
			  b'\x00\x00'
		ethlldp = ethernet.Ethernet(data)
		if (data != ethlldp.pack()):
			raise dpkt.PackError

class NetflowV1TestCase(unittest.TestCase):
	sample_v1 = "\x00\x01\x00\x18gza<B\x00\xfc\x1c$\x93\x08p\xac\x01 W\xc0\xa8c\xf7\n\x00\x02\x01\x00\x03\x00\n\x00\x00\x00\x01\x00\x00\x02(gz7,gz7,\\\x1b\x00P\xac\x01\x11,\x10\x00\x00\x00\x00\x04\x00\x1b\xac\x01\x18S\xac\x18\xd9\xaa\xc0\xa82\x02\x00\x03\x00\x19\x00\x00\x00\x01\x00\x00\x05\xdcgz7|gz7|\xd8\xe3\x00P\xac\x01\x06,\x10\x00\x00\x00\x00\x04\x00\x1b\xac\x01\x14\x18\xac\x18\x8d\xcd\xc0\xa82f\x00\x03\x00\x07\x00\x00\x00\x01\x00\x00\x05\xdcgz7\x90gz7\x90\x8a\x81\x17o\xac\x01\x066\x10\x00\x00\x00\x00\x04\x00\x03\xac\x0f'$\xac\x01\xe5\x1d\xc0\xa82\x06\x00\x04\x00\x1b\x00\x00\x00\x01\x00\x00\x02(gz:8gz:8\xa3Q\x126\xac)\x06\xfd\x18\x00\x00\x00\x00\x04\x00\x1b\xac\x01\x16E\xac#\x17\x8e\xc0\xa82\x06\x00\x03\x00\x1b\x00\x00\x00\x01\x00\x00\x02(gz:Lgz:L\xc9\xff\x00P\xac\x1f\x06\x86\x02\x00\x00\x00\x00\x03\x00\x1b\xac\r\t\xff\xac\x01\x99\x95\xc0\xa82\x06\x00\x04\x00\x1b\x00\x00\x00\x01\x00\x00\x05\xdcgz:Xgz:X\xee9\x00\x17\xac\x01\x06\xde\x10\x00\x00\x00\x00\x04\x00\x03\xac\x0eJ\xd8\xac\x01\xae/\xc0\xa82\x06\x00\x04\x00\x1b\x00\x00\x00\x01\x00\x00\x05\xdcgz:hgz:h\xb3n\x00\x15\xac\x01\x06\x81\x10\x00\x00\x00\x00\x04\x00\x1b\xac\x01#8\xac\x01\xd9*\xc0\xa82\x06\x00\x03\x00\x1b\x00\x00\x00\x01\x00\x00\x05\xdcgz:tgz:t\x00\x00\x83P\xac!\x01\xab\x10\x00\x00\x00\x00\x03\x00\x1b\xac\n`7\xac*\x93J\xc0\xa82\x06\x00\x04\x00\x1b\x00\x00\x00\x01\x00\x00\x05\xdcgz:tgz:t\x00\x00\x00\x00\xac\x012\xa9\x10\x00\x00\x00\x00\x04\x00\x07\xac\nG\x1f\xac\x01\xfdJ\xc0\xa82\x06\x00\x04\x00\x1b\x00\x00\x00\x01\x00\x00\x00(gz:\x88gz:\x88!\x99i\x87\xac\x1e\x06~\x02\x00\x00\x00\x00\x03\x00\x1b\xac\x01(\xc9\xac\x01B\xc4\xc0\xa82\x02\x00\x03\x00\x19\x00\x00\x00\x01\x00\x00\x00(gz:\x88gz:\x88}6\x00P\xac\x01\x06\xfe\x10\x00\x00\x00\x00\x04\x00\x1b\xac\x0b\x08\xe8\xac\x01F\xe2\xc0\xa82\x02\x00\x04\x00\x19\x00\x00\x00\x01\x00\x00\x05\xdcgz:\x9cgz:\x9c`ii\x87\xac\x01\x06;\x10\x00\x00\x00\x00\x04\x00\x1b\xac\x01\x1d$\xac<\xf0\xc3\xc0\xa82\x06\x00\x03\x00\x1b\x00\x00\x00\x01\x00\x00\x05\xdcgz:\x9cgz:\x9cF2\x00\x14\xac\x01\x06s\x18\x00\x00\x00\x00\x04\x00\x03\xac\x0b\x11Q\xac\x01\xde\x06\xc0\xa82\x06\x00\x04\x00\x1b\x00\x00\x00\x01\x00\x00\x05\xdcgz:\xb0gz:\xb0\xef#\x1a+\xac)\x06\xe9\x10\x00\x00\x00\x00\x04\x00\x1b\xac\x0cR\xd9\xac\x01o\xe8\xc0\xa82\x02\x00\x04\x00\x19\x00\x00\x00\x01\x00\x00\x05\xdcgz:\xc4gz:\xc4\x13n\x00n\xac\x19\x06\xa8\x10\x00\x00\x00\x00\x03\x00\x19\xac\x01=\xdd\xac\x01}\xee\xc0\xa82f\x00\x03\x00\x07\x00\x00\x00\x01\x00\x00\x00(gz:\xc4gz:\xc4\x00\x00\xdc\xbb\xac\x01\x01\xd3\x10\x00\x00\x00\x00\x04\x00\x1b\xac\x0f(\xd1\xac\x01\xcc\xa5\xc0\xa82\x06\x00\x04\x00\x1b\x00\x00\x00\x01\x00\x00\x05\xdcgz:\xd8gz:\xd8\xc5s\x17o\xac\x19\x06#\x18\x00\x00\x00\x00\x03\x00\x07\xac\n\x85[\xc0\xa8cn\n\x00\x02\x01\x00\x04\x00\n\x00\x00\x00\x01\x00\x00\x05\xdcgz:\xe4gz:\xe4\xbfl\x00P\xac\x01\x06\xcf\x10\x00\x00\x00\x00\x04\x00\x07\xac\x010\x1f\xac\x18!E\xc0\xa82f\x00\x03\x00\x07\x00\x00\x00\x01\x00\x00\x05\xdcgz;\x00gz;\x00\x11\x95\x04\xbe\xc0\xa8\x06\xea\x10\x00\x00\x00\x00\x03\x00\n\xac\x010\xb6\xac\x1e\xf4\xaa\xc0\xa82\x06\x00\x03\x00\x1b\x00\x00\x00\x01\x00\x00\x05\xdcgz;4gz;4\x88d\x00\x17\xac\x01\x06\x1f\x10\x00\x00\x00\x00\x04\x00\x1b\xac\x01#_\xac\x1e\xb0\t\xc0\xa82\x06\x00\x03\x00\x1b\x00\x00\x00\x01\x00\x00\x05\xdcgz;Hgz;H\x81S\x00P\xac \x06N\x10\x00\x00\x00\x00\x03\x00\x1b\xac\x01\x04\xd9\xac\x01\x94c\xc0\xa82\x06\x00\x03\x00\x1b\x00\x00\x00\x01\x00\x00\x02(gz;\\gz;\\U\x10\x00P\xac\x01\x06P\x18\x00\x00\x00\x00\x04\x00\x1b\xac\x01<\xae\xac*\xac!\xc0\xa82\x06\x00\x03\x00\x1b\x00\x00\x00\x01\x00\x00\x00\xfagz;\x84gz;\x84\x0c\xe7\x00P\xac\x01\x11\xfd\x10\x00\x00\x00\x00\x04\x00\x1b\xac\x01\x1f\x1f\xac\x17\xedi\xc0\xa82\x02\x00\x03\x00\x19\x00\x00\x00\x01\x00\x00\x05\xdcgz;\x98gz;\x98\xba\x17\x00\x16\xac\x01\x06|\x10\x00\x00\x00\x00\x03\x00\x07"

	def testPack(self):
		pass

	def testUnpack(self):
		nf = Netflow1(self.sample_v1)
		assert len(nf.data) == 24
		#print repr(nfv1)

class NetflowV5TestCase(unittest.TestCase):
	sample_v5 = b'\x00\x05\x00\x1d\xb5\xfa\xc9\xd0:\x0bAB&Vw\xde\x9bsv1\x00\x01\x00\x00\xac\n\x86\xa6\xac\x01\xaa\xf7\xc0\xa822\x02q\x00i\x00\x00\x00\x01\x00\x00\x02(\xb5\xfa\x81\x14\xb5\xfa\x81\x1452\x00P\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x01\x91D\xac\x14C\xe4\xc0\xa82\x16\x00i\x02q\x00\x00\x00\x01\x00\x00\x00(\xb5\xfa\x9b\xbd\xb5\xfa\x9b\xbd\x00P\x85\xd7\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x17\xe2\xd7\xac\x01\x8cV\xc0\xa822\x02q\x00i\x00\x00\x00\x01\x00\x00\x05\xdc\xb5\xfao\xb8\xb5\xfao\xb8v\xe8\x17o\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x0e\xf2\xe5\xac\x01\x91\xb2\xc0\xa822\x02q\x00i\x00\x00\x00\x01\x00\x00\x00\xfa\xb5\xfa\x81\xee\xb5\xfa\x81\xee\xd0\xeb\x00\x15\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\nCj\xac)\xa7\t\n\x00\x02\x01\x02q\x00\xdb\x00\x00\x00\x01\x00\x00\x02(\xb5\xfa\x85\x92\xb5\xfa\x85\x92\x8c\xb0\x005\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x01\x96=\xac\x15\x1a\xa8\xc0\xa82\x16\x00i\x02q\x00\x00\x00\x01\x00\x00\x05\xdc\xb5\xfa\x86\xe0\xb5\xfa\x86\xe0\xb4\xe7\x00\xc2\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x01V\xd1\xac\x01\x86\x15\xc0\xa822\x02q\x00i\x00\x00\x00\x01\x00\x00\x05\xdc\xb5\xfa}:\xb5\xfa}:[Q\x00P\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac2\xf1\xb1\xac)\x19\xca\n\x00\x02\x01\x02q\x00\xdb\x00\x00\x00\x01\x00\x00\x05\xdc\xb5\xfa\x83\xc3\xb5\xfa\x83\xc3\x16,\x00\x15\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x0cA4\xac\x01\x9az\xc0\xa822\x02q\x00i\x00\x00\x00\x01\x00\x00\x05\xdc\xb5\xfa\x8d\xa7\xb5\xfa\x8d\xa7\x173\x00\x15\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x1e\xd2\x84\xac)\xd8\xd2\n\x00\x02\x01\x02q\x00\xdb\x00\x00\x00\x01\x00\x00\x05\xdc\xb5\xfa\x8e\x97\xb5\xfa\x8e\x977*\x17o\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x01\x85J\xac \x11\xfc\xc0\xa82\x16\x00i\x02q\x00\x00\x00\x01\x00\x00\x02(\xb5\xfa\x884\xb5\xfa\x884\xf5\xdd\x00\x8f\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x01\x04\x80\xac<[n\n\x00\x02\x01\x02q\x00\xdb\x00\x00\x00\x01\x00\x00\x05\xdc\xb5\xfa\x9dr\xb5\xfa\x9drs$\x00\x16\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x01\xb9J\xac"\xc9\xd7\xc0\xa82\x16\x00i\x02q\x00\x00\x00\x01\x00\x00\x00(\xb5\xfa\x90r\xb5\xfa\x90r\x0f\x8d\x00\xc2\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac*\xa3\x10\xac\x01\xb4\x19\xc0\xa822\x02q\x00i\x00\x00\x00\x01\x00\x00\x00(\xb5\xfa\x92\x03\xb5\xfa\x92\x03pf\x00\x15\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x01\xabo\xac\x1e\x7fi\xc0\xa82\x16\x00i\x02q\x00\x00\x00\x01\x00\x00\x05\xdc\xb5\xfa\x93\x7f\xb5\xfa\x93\x7f\x00P\x0b\x98\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x0c\n\xea\xac\x01\xa1\x15\xc0\xa822\x02q\x00i\x00\x00\x00\x01\x00\x00\x05\xdc\xb5\xfay\xcf\xb5\xfay\xcf[3\x17\xe0\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x01\xbb\xb3\xac)u\x8c\n\x00\x02\x01\x00i\x00\xdb\x00\x00\x00\x01\x00\x00\x00\xfa\xb5\xfa\x943\xb5\xfa\x943\x00P\x1e\xca\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x0fJ`\xac\x01\xab\x94\xc0\xa822\x02q\x00i\x00\x00\x00\x01\x00\x00\x02(\xb5\xfa\x87[\xb5\xfa\x87[\x9a\xd6/\xab\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac*\x0f\x93\xac\x01\xb8\xa3\xc0\xa822\x02q\x00i\x00\x00\x00\x01\x00\x00\x00(\xb5\xfa\x89\xbb\xb5\xfa\x89\xbbn\xe1\x00P\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x01\x93\xa1\xac\x16\x80\x0c\xc0\xa82\x16\x00i\x02q\x00\x00\x00\x01\x00\x00\x00(\xb5\xfa\x87&\xb5\xfa\x87&\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x01\x83Z\xac\x1fR\xcd\xc0\xa82\x16\x00i\x02q\x00\x00\x00\x01\x00\x00\x05\xdc\xb5\xfa\x90\r\xb5\xfa\x90\r\xf7*\x00\x8a\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x0c\xe0\xad\xac\x01\xa8V\xc0\xa822\x02q\x00i\x00\x00\x00\x01\x00\x00\x05\xdc\xb5\xfa\x9c\xf6\xb5\xfa\x9c\xf6\xe5|\x1a+\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x1e\xccT\xac<x&\n\x00\x02\x01\x02q\x00\xdb\x00\x00\x00\x01\x00\x00\x05\xdc\xb5\xfa\x80\xea\xb5\xfa\x80\xea\x00\x00\x00\x00\x00\x00/\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x01\xbb\x18\xac\x01|z\xc0\xa82\x16\x00i\x02q\x00\x00\x00\x01\x00\x00\x00\xfa\xb5\xfa\x88p\xb5\xfa\x88p\x00P\x0b}\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x17\x0er\xac\x01\x8f\xdd\xc0\xa822\x02q\x00i\x00\x00\x00\x01\x00\x00\x02(\xb5\xfa\x89\xf7\xb5\xfa\x89\xf7\r\xf7\x00\x8a\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\n\xbb\x04\xac<\xb0\x15\n\x00\x02\x01\x02q\x00\xdb\x00\x00\x00\x01\x00\x00\x05\xdc\xb5\xfa\x90\xa9\xb5\xfa\x90\xa9\x9c\xd0\x00\x8f\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\nz?\xac)\x03\xc8\n\x00\x02\x01\x02q\x00\xdb\x00\x00\x00\x01\x00\x00\x05\xdc\xb5\xfaue\xb5\xfaue\xee\xa6\x00P\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x01\xb5\x05\xc0\xa8c\x9f\n\x00\x02\x01\x00i\x00\xdb\x00\x00\x00\x01\x00\x00\x05\xdc\xb5\xfa{\xc7\xb5\xfa{\xc7\x00P\x86\xa9\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac2\xa5\x1b\xac)0\xbf\n\x00\x02\x01\x02q\x00\xdb\x00\x00\x00\x01\x00\x00\x00\xfa\xb5\xfa\x9bZ\xb5\xfa\x9bZC\xf9\x17\xe0\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00'

	def testPack(self):
		pass

	def testUnpack(self):
		nf = Netflow5(self.sample_v5)
		assert len(nf.data) == 29
		#print repr(nfv5)


class NTPTestCase(unittest.TestCase):
	def testPack(self):
		n = NTP(self.s)
		self.failUnless(self.s == str(n))

	def testUnpack(self):
		n = NTP(self.s)
		self.failUnless(n.li == ntp.NO_WARNING)
		self.failUnless(n.v == 4)
		self.failUnless(n.mode == ntp.SERVER)
		self.failUnless(n.stratum == 2)
		self.failUnless(n.id == b'\xc1\x02\x04\x02')

		# test get/set functions
		n.li = ntp.ALARM_CONDITION
		n.v = 3
		n.mode = ntp.CLIENT
		self.failUnless(n.li == ntp.ALARM_CONDITION)
		self.failUnless(n.v == 3)
		self.failUnless(n.mode == ntp.CLIENT)

	s = b'\x24\x02\x04\xef\x00\x00\x00\x84\x00\x00\x33\x27\xc1\x02\x04\x02\xc8\x90\xec\x11\x22\xae\x07\xe5\xc8\x90\xf9\xd9\xc0\x7e\x8c\xcd\xc8\x90\xf9\xd9\xda\xc5\xb0\x78\xc8\x90\xf9\xd9\xda\xc6\x8a\x93'

class PcapTestCase(unittest.TestCase):
	def test_endian(self):
		be = b'\xa1\xb2\xc3\xd4\x00\x02\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x00\x00\x00\x01'
		le = b'\xd4\xc3\xb2\xa1\x02\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x00\x00\x00\x01\x00\x00\x00'
		befh = FileHdr(be)
		lefh = LEFileHdr(le)
		self.failUnless(befh.linktype == lefh.linktype)


class RadiotapTestCase(unittest.TestCase):
	def test_Radiotap(self):
		s = b'\x00\x00\x00\x18\x6e\x48\x00\x00\x00\x02\x6c\x09\xa0\x00\xa8\x81\x02\x00\x00\x00\x00\x00\x00\x00'
		rad = Radiotap(s)
		self.failUnless(rad.version == 0)
		self.failUnless(rad.present_flags == 0x6e480000)
		self.failUnless(rad.tsft_present == 0)
		self.failUnless(rad.flags_present == 1)
		self.failUnless(rad.rate_present == 1)
		self.failUnless(rad.channel_present == 1)
		self.failUnless(rad.fhss_present == 0)
		self.failUnless(rad.ant_sig_present == 1)
		self.failUnless(rad.ant_noise_present == 1)
		self.failUnless(rad.lock_qual_present == 0)
		self.failUnless(rad.db_tx_attn_present == 0)
		self.failUnless(rad.dbm_tx_power_present == 0)
		self.failUnless(rad.ant_present == 1)
		self.failUnless(rad.db_ant_sig_present == 0)
		self.failUnless(rad.db_ant_noise_present == 0)
		self.failUnless(rad.rx_flags_present == 1)
		self.failUnless(rad.channel.freq == 0x6c09)
		self.failUnless(rad.channel.flags == 0xa000)
		self.failUnless(len(rad.fields) == 7)

class RIPTestCase(unittest.TestCase):
	def testPack(self):
		r = RIP(self.s)
		self.failUnless(self.s == str(r))

	def testUnpack(self):
		r = RIP(self.s)
		self.failUnless(r.auth == None)
		self.failUnless(len(r.rtes) == 2)

		rte = r.rtes[1]
		self.failUnless(rte.family == 2)
		self.failUnless(rte.route_tag == 0)
		self.failUnless(rte.metric == 1)

	s = b'\x02\x02\x00\x00\x00\x02\x00\x00\x01\x02\x03\x00\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00\x00\xc0\xa8\x01\x08\xff\xff\xff\xfc\x00\x00\x00\x00\x00\x00\x00\x01'

class SCTPTestCase(unittest.TestCase):
	def testPack(self):
		sct = SCTP(self.s)
		self.failUnless(self.s == str(sct))
		sct.sum = 0
		self.failUnless(self.s == str(sct))

	def testUnpack(self):
		sct = SCTP(self.s)
		self.failUnless(sct.sport == 32836)
		self.failUnless(sct.dport == 80)
		self.failUnless(len(sct.chunks) == 1)
		self.failUnless(len(sct) == 72)

		chunk = sct.chunks[0]
		self.failUnless(chunk.type == sctp.INIT)
		self.failUnless(chunk.len == 60)

	s = b'\x80\x44\x00\x50\x00\x00\x00\x00\x30\xba\xef\x54\x01\x00\x00\x3c\x3b\xb9\x9c\x46\x00\x01\xa0\x00\x00\x0a\xff\xff\x2b\x2d\x7e\xb2\x00\x05\x00\x08\x9b\xe6\x18\x9b\x00\x05\x00\x08\x9b\xe6\x18\x9c\x00\x0c\x00\x06\x00\x05\x00\x00\x80\x00\x00\x04\xc0\x00\x00\x04\xc0\x06\x00\x08\x00\x00\x00\x00'

class TelnetTestCase(unittest.TestCase):
	def test_telnet(self):
		l = []
		s = b"\xff\xfb%\xff\xfa%\x00\x00\x00\xff\xf0\xff\xfd&\xff\xfa&\x05\xff\xf0\xff\xfa&\x01\x01\x02\xff\xf0\xff\xfb\x18\xff\xfb \xff\xfb#\xff\xfb'\xff\xfc$\xff\xfa \x0038400,38400\xff\xf0\xff\xfa#\x00doughboy.citi.umich.edu:0.0\xff\xf0\xff\xfa'\x00\x00DISPLAY\x01doughboy.citi.umich.edu:0.0\x00USER\x01dugsong\xff\xf0\xff\xfa\x18\x00XTERM\xff\xf0\xff\xfd\x03\xff\xfc\x01\xff\xfb\x1f\xff\xfa\x1f\x00P\x00(\xff\xf0\xff\xfd\x05\xff\xfb!\xff\xfd\x01fugly\r\x00yoda\r\x00bashtard\r\x00"
		l.append(s)
		s = b"\xff\xfd\x01\xff\xfd\x03\xff\xfb\x18\xff\xfb\x1f\xff\xfa\x1f\x00X\x002\xff\xf0admin\r\x00\xff\xfa\x18\x00LINUX\xff\xf0foobar\r\x00enable\r\x00foobar\r\x00\r\x00show ip int Vlan 666\r\x00"
		l.append(s)
		s = b"\xff\xfb%\xff\xfa%\x00\x00\x00\xff\xf0\xff\xfd&\xff\xfa&\x05\xff\xf0\xff\xfa&\x01\x01\x02\xff\xf0\xff\xfb&\xff\xfb\x18\xff\xfb \xff\xfb#\xff\xfb\'\xff\xfc$\xff\xfa \x0038400,38400\xff\xf0\xff\xfa#\x00doughboy.citi.umich.edu:0.0\xff\xf0\xff\xfa\'\x00\x00DISPLAY\x01doughboy.citi.umich.edu:0.0\x00USER\x01dugsong\xff\xf0\xff\xfa\x18\x00XTERM\xff\xf0\xff\xfd\x03\xff\xfc\x01\xff\xfb\"\xff\xfa\"\x03\x01\x03\x00\x03b\x03\x04\x02\x0f\x05\x00\xff\xff\x07b\x1c\x08\x02\x04\tB\x1a\n\x02\x7f\x0b\x02\x15\x0c\x02\x17\r\x02\x12\x0e\x02\x16\x0f\x02\x11\x10\x02\x13\x11\x00\xff\xff\x12\x00\xff\xff\xff\xf0\xff\xfb\x1f\xff\xfa\x1f\x00P\x00(\xff\xf0\xff\xfd\x05\xff\xfb!\xff\xfa\"\x01\x0f\xff\xf0\xff\xfd\x01\xff\xfe\x01\xff\xfa\"\x03\x01\x80\x00\xff\xf0\xff\xfd\x01werd\r\n\xff\xfe\x01yoda\r\n\xff\xfd\x01darthvader\r\n\xff\xfe\x01"
		l.append(s)
		exp = [ (['fugly', 'yoda', 'bashtard'], {'USER': 'dugsong', 'DISPLAY': 'doughboy.citi.umich.edu:0.0'}), (['admin', 'foobar', 'enable', 'foobar', '', 'show ip int Vlan 666'], {}), (['werd', 'yoda', 'darthvader'], {'USER': 'dugsong', 'DISPLAY': 'doughboy.citi.umich.edu:0.0'}) ]
		self.failUnless(list(map(telnet.strip_options, l)) == exp)


suite = unittest.TestSuite()
loader = unittest.defaultTestLoader


print(">>>>>>>>>>>>>starting")
eth = Ethernet(b'\x00\xb0\xd0\xe1\x80r\x00\x11$\x8c\x11\xde\x86\xdd`\x00\x00\x00\x00(\x06@\xfe\x80\x00\x00\x00\x00\x00\x00\x02\x11$\xff\xfe\x8c\x11\xde\xfe\x80\x00\x00\x00\x00\x00\x00')
print("<<<<<<<<<<<<<ending")

# TODO: use bytes.fromhex('f0 f1f2  ') -> b'\xf0\xf1\xf2'
#print(ieee80211)
#print(dir(ieee80211))
#print(dir(IEEE80211))
#print(ieee80211.XYZ)

#suite.addTests(loader.loadTestsFromTestCase(ASN1TestCase))
#suite.addTests(loader.loadTestsFromTestCase(BGPTestCase))
#suite.addTests(loader.loadTestsFromTestCase(DHCPTestCast))
#suite.addTests(loader.loadTestsFromTestCase(DiameterTestCase))
#suite.addTests(loader.loadTestsFromTestCase(DNSTestCase))
#suite.addTests(loader.loadTestsFromTestCase(EthTestCase))
#suite.addTests(loader.loadTestsFromTestCase(H225TestCase))
#suite.addTests(loader.loadTestsFromTestCase(HTTPTest))
#suite.addTests(loader.loadTestsFromTestCase(ICMPTestCase))
#suite.addTests(loader.loadTestsFromTestCase(IEEE80211TestCase))
#suite.addTests(loader.loadTestsFromTestCase(IPTestCase))
#suite.addTests(loader.loadTestsFromTestCase(IP6TestCase))
#suite.addTests(loader.loadTestsFromTestCase(LLCTestCase))
#suite.addTests(loader.loadTestsFromTestCase(LLDPTestCase))
#suite.addTests(loader.loadTestsFromTestCase(NetflowV1TestCase))
#suite.addTests(loader.loadTestsFromTestCase(NTPTestCase))
#suite.addTests(loader.loadTestsFromTestCase(PcapTestCase))
#suite.addTests(loader.loadTestsFromTestCase(RadiotapTestCase))
#suite.addTests(loader.loadTestsFromTestCase(RIPTestCase))
suite.addTests(loader.loadTestsFromTestCase(SCTPTestCase))
#suite.addTests(loader.loadTestsFromTestCase(TelnetTestCase))

unittest.TextTestRunner().run(suite)
