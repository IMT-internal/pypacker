{"name":"Pypacker","tagline":"pypacker: The fast and simple packet creation and parsing lib for Python.","body":"### General information\r\nThis is pypacker: The fast and simple packet creation and parsing lib for Python.\r\nIt lets you create packets manually by defining every aspect of all header data\r\nand dissect packets by parsing captured packet bytes.\r\n\r\n#### What you can do with pypacker\r\nRead packets (eg. via pcap) and analyze all aspects of it. It's as easy as:\r\n\r\n\tf = open(\"packets.pcap\", \"rb\")\r\n\tpcap = ppcap.Reader(f)\r\n\tcnt = 0\r\n\r\n\tfor ts, buf in pcap:\r\n\t        cnt += 1\r\n        \teth = Ethernet(buf)\r\n\r\n\t        if eth[TCP] is not None:\r\n        \t        print(\"%9.3f: %s:%s -> %s:%s\" % (ts, eth[IP].src_s, eth[TCP].sport, eth[IP].dst_s, eth[TCP].dport))\r\n\r\nCreate Packets giving specific values or take the defaults. Those can be resent using pcap, raw sockets etc. It's as easy as:\r\n\r\n\tip = IP(src_s=\"127.0.0.1\", dst_s=\"192.168.0.1\", p=1) +\r\n\t\tICMP(type=8) +\r\n\t\tEcho(id=123, seq=1, data=b\"foobar\")\r\n\tip[ICMP].sum = 123\t# mark as changed for checksum-recalculation\r\n\r\n#### What you can NOT do with it\r\nPypacker is not as full-blown feature-rich as other packet-analyzer like Scapy, so you can't automatically create neat graphics out of TCP-sequence-numbers, use it as a port-scanner, fingerprint servers\tor use it as a fuzzer by writing one line of code. Those kind of features can easy be written using open-source tools like gnuplot and very few lines of python-code. \r\n\r\nPlease feel free to post bug-reports / patches / feature-requests. Please read\r\nthe bugtracker for already knwown bugs before filing a new one!\r\n\r\n### Prerequisites\r\n- Python >=3.1\r\n- python setuptools >=0.6.21\r\n\r\n### Examples\r\nSee directory pypacker/examples and testcases in pypacker/tests/.\r\n\r\n### Testing\r\nTests are executed as follows:\r\n\r\n1) Optional: Add pypacker directory to the PYTHONPATH. This is only needed if tests are executed without installing pypacker\r\n\r\nexport PYTHONPATH=$PYTHONPATH:/dir/to/pypacker/\r\n\r\n2) execute tests\r\n\r\npython3 tests/test_pypacker.py\r\n\r\n### FAQ\r\n\r\n**Q**:\tHow much does pypacker cost?\r\n\r\n**A**:\tPypacker is a free software - you can download it without paying any license fee.\r\n\tThe version you download is not a demo version, with limitations not present in\r\n\ta full version - it's the full version. The license under which pypacker is\r\n\tissued is the BSD License. See LICENCE and http://opensource.org/licenses/bsd-license.php\r\n\tfor more information.\r\n\r\n**Q**:\tWhich protocols are supported?\r\n\r\n**A**:\tCurrently supported protocols are:\r\n\tEthernet, IP, ICMP, TCP, UDP, HTTP, ARP, STP, OSPF, PPP, PPPoE, STP, VRRP, AH, ESP, IGMP,\r\n\tIPX, PIM, AIM, NTP, DHCP, RIP, SCTP, RTP, SIP, TFTP\r\n\r\n**Q**:\tAre there any plans to support [protocol xyz]?\r\n\r\n**A**:\tSupport for particular protocols is added to pypacker as a result of people contributing\r\n\tthat support - no formal plans for adding support for particular protocols in particular\r\n\tfuture releases exist. \r\n\r\n**Q**:\tIs there any documentation?\r\n\r\n**A**:\tpypacker is based on code of dpkt, which in turn didn't have any official and very little\r\n\tinternal code documentation. This makes understanding of the internal behaviour pretty hard.\r\n\tAfter all the code documentation was pretty much extended for pypacker (see pypacker/pypacker.py).\r\n\tProtocols itself (see layerXYZ) generally don't have much documentation because those are documented\r\n\tby their respective RFCs/official standards.\r\n\r\n**Q**:\tThere is problem xyz with pypacker using Windows 3.11/XP/7/8/mobile etc. Can you fix that?\r\n\r\n**A**:\tNo. There will be no windows support.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}