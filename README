pypacker
========

General information
-------------------

This is pypacker: The fast and simple packet creation and parsing lib for Python.
It lets you dissect packets by applying allready captured packets and create
packets manually by defining every aspect of all header data.

What you can do with pypacker:
	- Read packets (eg via pcap) and analyze all aspects of it. It's as easy as:

	import pypacker, pcap
	from pypacker import Ethernet, Http

	f = open('packets.pcap', 'rb')
	pcap = pypacker.pcap.Reader(f)

	for ts, buf in pcap:
		print("TS: %s LEN: %d" % (ts, len(buf))
		ether = Ethernet(buf)
		try:
			# skip packets out of stream
			if not ether_old.is_related(ether):
				continue
		except:
			continue

		ether_old = ether
		ip = ether.ip
		tcp = ip.tcp
		print("%s:%s -> %s:%s", (ip.src, tcp.src, ip.dst, tcp.dst))
		http = pypacker.Http(tcp.data)
		if http.method == "GET":
			print("got GET-request for: %s", % http.uri)

	Protocols up to the transport-layer are decoded automatically.
	Higher-level protocols like HTTP need to be manually instatiated
	because there is generally no information about them in the lower
	layers. This kind of information has to be interpreted by a
	user-supplied logic.

	- Create Packets giving specific values or take the defaults.
	Those can be resent using pcap, raw sockets etc. It's as easy as:

	ip = IP(src="127.0.0.1", dst="192.168.0.1", p=1) /
		ICMP(type=8) /
		ICMP.Echo(id=123, seq=1, data='foobar')



What you can NOT do with it:
	Pypacker is not as full-blown feature-rich as other packet-analyzer
	like Scapy, so you can't autoamtically create neat graphics out of
	TCP-sequence-numbers, use it as a port-scanner, fingerprint servers
	or use it as a fuzzer by writing one line of code. Those kind of
	features can easy be written using open-source tools like gnuplot
	and very few lines of python-code. 

Please feel free to post bug-reports / patches / feature-requests. Please read the bugtracker
for allready knwown bugs before filing a new one!


Prerequisites
-------------

- Python 3.2 or upwards
- optional: pcap library for reading packets from file


Examples
--------

See directory examples.


Testing
-------

Tests are executed as follows:

export PYTHONPATH=$PYTHONPATH:/dir/to/pypacker/pypacker/
python3 tests/test_pypacker.py

FAQ
---

Q:	How much does pypacker cost?
A:	Pypacker is a free software - you can download it without paying any license fee.
	The version you download is not a demo version, with limitations not present in
	a full version - it's the full version. The license under which pypacker is
	issued is the BSD License. See LICENCE and http://opensource.org/licenses/bsd-license.php
	for more information.

Q:	Are there any plans to support [protocol xyz]?
A:	Support for particular protocols is added to pypacker as a result of people contributing
	that support - no formal plans for adding support for particular protocols in particular
	future releases exist. 

Q:	Is there any documentation?
A:	pypacker is based on code of dpkt, which in turn didn't have any official and very little
	internal code documentation. This makes understanding of the internal behaviour pretty hard.
	The code documentation was pretty much extended for pypacker (see pypacker/pypacker.py)
	and adding even more documentation is one point on the TODO-list.

Q:	There is problem xyz with pypacker using windows 3.11/XP/7/8/mobile etc. Can you fix that?
A:	No. There will be no windows support.
